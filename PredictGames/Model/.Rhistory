?readRDS
readRDS("/Model/PredictGames")
readRDS("/Model/PredictGames")
list.files("/Model")
list.files("./Model")
readRDS("./Model/PredictGames")
library("RODBC")
server.name = "LAPTOP-3VQG3HOU\\SQL2017" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	home_team = h.team 		, away_team = a.team 		, gd.game_date 		, sd.day_type 		, sd.home_team_record_level 		, sd.away_team_record_level 		, sd.home_team_overall_record_level 		, sd.away_team_overall_record_level 		, home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) # To get data from SQL odbcClose(conn)
head(new.games)
?predict
predict
?predict.glm
head(new.games)
Predictgames <-readRDS("./Model/PredictGames")
readRDS("./Model/PredictGames")
getwd()
readRDS("./Model/PredictGames")
pd <- readRDS("./Model/PredictGames")
glm(pd, family = binomial)
predict.glm(pd, family = binomial)
output <- predict.glm(pd, family = binomial)
output <- cbind(new.games, predict.glm(pd, family = binomial))
?predict.glm
output <- cbind(new.games, predict.glm(pd, newdata = new.games, family = binomial))
predict.glm(pd, newdata = new.games, family = binomial)
?predict.glm
class(pd)
library("RODBC") pd <- readRDS("./Model/PredictGames") server.name = "LAPTOP-3VQG3HOU\\SQL2017" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	home_team = h.team 		, away_team = a.team 		, gd.game_date 		, sd.day_type 		, sd.home_team_record_level 		, sd.away_team_record_level 		, sd.home_team_overall_record_level 		, sd.away_team_overall_record_level 		, home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	"
library("RODBC") pd <- readRDS("./Model/PredictGames") server.name = "LAPTOP-3VQG3HOU\\SQL2017" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	home_team = h.team 		, away_team = a.team 		, gd.game_date 		, sd.day_type 		, sd.home_team_record_level 		, sd.away_team_record_level 		, sd.home_team_overall_record_level 		, sd.away_team_overall_record_level 		, home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	"
new.games <- sqlQuery(channel = conn, sql.statement) # To get data from SQL odbcClose(conn)
new.games
head(new.games)
odbcClose(conn)
output <- cbind(new.games, predict.glm(pd, newdata = new.games, family = binomial(link = "logit")))
head(output)
library("RODBC") pd <- readRDS("./Model/PredictGames")
server.name = "LAPTOP-3VQG3HOU\\SQL2017" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	home_team = h.team 		, away_team = a.team 		, gd.game_date 		, sd.day_type 		, sd.home_team_record_level 		, sd.away_team_record_level 		, sd.home_team_overall_record_level 		, sd.away_team_overall_record_level 		, home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) # To get data from SQL odbcClose(conn)
library("tibble")
new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble()
library("magrittr")
new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble()
pd <- readRDS("./Model/PredictGames") server.name = "LAPTOP-3VQG3HOU\\SQL2017" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	home_team = h.team 		, away_team = a.team 		, gd.game_date 		, sd.day_type 		, sd.home_team_record_level 		, sd.away_team_record_level 		, sd.home_team_overall_record_level 		, sd.away_team_overall_record_level 		, home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn)
new.games
output <- cbind(new.games, predict.glm(pd, newdata = new.games, family = binomial(link = "logit")))
output <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit")) %>% 		cbind(new.games,.)
output <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit")) %>% 		cbind(new.games, .) %>% 		as_tibble()
output
output
output
output <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit")) %>% 		cbind(new.games, .) %>% 		as_tibble() %>% 		select(home_team, away_team, home_team_win, .)
?predict.glm
output <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") %>% 		cbind(new.games, .) %>% 		as_tibble()
output
?colnames
predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") final.ouput <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		select(home_team, away_team, home_team_win, predictions)
library("dplyr")
predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") final.ouput <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		select(home_team, away_team, home_team_win, predictions)
final.ouput
predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") final.ouput <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(home_team, away_team, home_team_win, predictions)
predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") final.ouput <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(game_date, home_team, away_team, home_team_win, predicted_home_team_win = ifelse(predictions > .5, 1, 0))
final.ouput
predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") final.ouput <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > .5, 1, 0)) %>% 		select(game_date, home_team, away_team, home_team_win, predicted_home_team_win)
final.output
final.output
predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") final.output <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > .5, 1, 0)) %>% 		select(game_date, home_team, away_team, home_team_win, predicted_home_team_win)
final.output
str(pd)
pd
pd
getwd()
library(readr) library(RODBC)
library(RODBC) library(readr)
library(RODBC) library(readr)
students <- read_csv("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/ParameterizedQueries/Data/StudentList.csv")
students$StudentAK
class(students$StudentAK)
length(students$StudentAK)
a <- paste(students$StudentAK, collapse = "|")
a
length(paste(students$StudentAK, collapse = "|"))
student_ids <- paste0("'", paste(students$StudentAK, collapse = "|"), "'")
student_ids
server.name = "DESKTOP-171P4OD" db.name = "StudentDB" sql.statement = paste("EXEC dbo.DynamicReportParameters", student_ids, sep = " ")
connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "")
conn <- odbcDriverConnect(connection.string) FilteredData <- sqlQuery(channel = conn, sql.statement) odbcClose(conn)
FilteredData
library(tibble)
conn <- odbcDriverConnect(connection.string) FilteredData <- sqlQuery(channel = conn, sql.statement) %>% as_tibble()  odbcClose(conn)
library(magrittr)
library(tibble)
students <- read_csv("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/ParameterizedQueries/Data/StudentList.csv") student_ids <- paste0("'", paste(students$StudentAK, collapse = "|"), "'") server.name = "DESKTOP-171P4OD" db.name = "StudentDB" sql.statement = paste("EXEC dbo.DynamicReportParameters", student_ids, sep = " ") connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "")
conn <- odbcDriverConnect(connection.string) FilteredData <- sqlQuery(channel = conn, sql.statement) %>% as_tibble()  odbcClose(conn)
FilteredData
library(data.table) library(purrr) library(tibble)
source.folder <- "C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BasketballGameData" files <- list.files(source.folder)
files
?fread
all_games <- map(files, fread, colClasses = list(character = column.names)) %>% 	rbindlist() %>% 	as_tibble()
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BasketballGameData") files <- list.files(".")
all_games <- map(files, fread, colClasses = list(character = column.names)) %>% 	rbindlist() %>% 	as_tibble()
all_games <- map(files, fread) %>% 	rbindlist() %>% 	as_tibble()
all_games
all_games <- map(files, fread)
str(all_games)
class(all_games)
class(all_games[[1]])
?data.table
all_games <- map(files, fread) %>% 	rbindlist()
class(all_games)
all_games <- map(files, fread) %>% 	rbindlist() %>% 	as_tibble()
all_games
library(data.table) library(purrr) library(magrittr) library(tibble)
#Get a list of files in the BLS folder bls_files <- list.files(path = "./BLS")
bls_files
#Get a list of files in the BLS folder bls_files <- list.files(path = "./BLS")
bls_files 
bls_files <- list.files(path = "./BLS", pattern = "la\\.data\\.\\d+\\.*")
bls_files 
grep("la.data.\\d+.(?!Current.*)", bls_files, value = T, perl = T)
Remove files that begins with "la.data.0.Current*" using a negative lookahead grep("la.data.\\d+.(?!Current.*)", bls_files, value = T, perl = T)
#Remove files that begins with "la.data.0.Current*" and other non-state files using negative look behinds grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T)
#Stores the files in a character vector and concatenates the beginning part of the file path to each file  bls_files <- grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T) %>% file.path("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles", "BLS",.)
getwd()
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BLS")
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BLS")
#Stores the files in a character vector and concatenates the beginning part of the file path to each file  bls_files <- grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T) #Combines all of the files that represents a state into a list  cc <- c("character", "character", "character", "character", "character") bls_data <- map(bls_files, fread, colClasses = cc) %>% 	rbindlist() %>% 	as_tibble()
?grep
bls_data
library(data.table) library(purrr) library(magrittr) library(tibble) setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BLS") #Get a list of files in the BLS folder bls_files <- list.files(path = ".")
bls_files <- list.files(path = ".")
bls_files
#List all files that begins with "la.data.[<1 or 2 digit number>]" bls_files <- list.files(path = ".", pattern = "la\\.data\\.\\d+\\.*")
bls_files
grep("la.data.\\d+.(?!Current.*)", bls_files, value = T, perl = T)
#Remove files that begins with "la.data.0.Current*" and other non-state files using negative look behinds grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T)
#Stores the files in a character vector and concatenates the beginning part of the file path to each file  bls_files <- grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T)
#Combines all of the files that represents a state into a list  cc <- c("character", "character", "character", "character", "character") bls_data <- map(bls_files, fread, colClasses = cc) %>% 	rbindlist() %>% 	as_tibble()
bls_data
library(lubridate) library(rvest) library(stringr) library(purrr) library(tibble)
url <- "https://www.opm.gov/policy-data-oversight/snow-dismissal-procedures/federal-holidays/" holiday_data <- 	read_html(url) %>% 	html_nodes(".DataTable") %>% 	html_text()
holiday_data
class(holiday_data)
holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n")
holiday_vector
class(holiday_vector)
holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() 
holiday_vector
holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "")
holiday_vector
holiday_vector_length <- length(holiday_vector) - 1 year <- as.numeric(str_sub(holiday_vector[1], 1, 4))
holiday_vector <- holiday_vector[2:holiday_vector_length]
holiday_vector
dates <- holiday_vector[seq(1, holiday_vector_length, 2)] %>% 		na.omit() %>% 		paste(year, sep = " ") %>% 		mdy()
dates
holidays <- holiday_vector[seq(2, holiday_vector_length, 2)]
idays <- holiday_vector[seq(2, holiday_vector_length, 2)] holiday_year_info <- tibble(dates, holidays)
holiday_year_info
library(RODBC) library(readr) library(magrittr) library(tibble)
library(RODBC) library(readr) library(magrittr) library(tibble)
students$StudentAK
students <- read_csv("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/ParameterizedQueries/Data/StudentList.csv")
students$StudentAK
student_ids <- paste0("'",paste(students$StudentAK, collapse = "|"), "'")
student_ids
library("RODBC") library("tibble") library("magrittr") library("dplyr") pd <- readRDS("./Model/PredictGames") server.name = "LAPTOP-3VQG3HOU\\SQL2017" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	home_team = h.team 		, away_team = a.team 		, gd.game_date 		, sd.day_type 		, sd.home_team_record_level 		, sd.away_team_record_level 		, sd.home_team_overall_record_level 		, sd.away_team_overall_record_level 		, home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn) predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") game.results <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > .5, 1, 0)) %>% 		select(game_date, home_team, away_team, home_team_win, predicted_home_team_win)
getwd()
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/PredictGames") pd <- readRDS("./Model/PredictGames") server.name = "LAPTOP-3VQG3HOU\\SQL2017" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	home_team = h.team 		, away_team = a.team 		, gd.game_date 		, sd.day_type 		, sd.home_team_record_level 		, sd.away_team_record_level 		, sd.home_team_overall_record_level 		, sd.away_team_overall_record_level 		, home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn) predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") game.results <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > .5, 1, 0)) %>% 		select(game_date, home_team, away_team, home_team_win, predicted_home_team_win)
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/PredictGames") pd <- readRDS("./Model/PredictGames")
server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	home_team = h.team 		, away_team = a.team 		, gd.game_date 		, sd.day_type 		, sd.home_team_record_level 		, sd.away_team_record_level 		, sd.home_team_overall_record_level 		, sd.away_team_overall_record_level 		, home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn)
predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response")
game.results <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > .5, 1, 0)) %>% 		select(game_date, home_team, away_team, home_team_win, predicted_home_team_win)
game.results
game.results <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0)) %>% 		select(game_date, home_team, away_team, home_team_win, predicted_home_team_win)
game.results
game.results <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0)) %>% 		select(game_date, home_team, away_team, home_team_win, predicted_home_team_win, predictions)
game.results
server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	home_team = h.team 		, away_team = a.team 		, gd.game_date 		, sd.day_type 		, sd.home_team_record_level 		, sd.away_team_record_level 		, sd.home_team_overall_record_level 		, sd.away_team_overall_record_level 		, gd.[home_score] 		, gd.[visitior_score] 		, home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn) predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") game.results <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0)) %>% 		select(game_date, home_team, away_team, home_team_win, home_score, visitor_score, predicted_home_team_win, predictions)
server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	home_team = h.team 		, away_team = a.team 		, gd.game_date 		, sd.day_type 		, sd.home_team_record_level 		, sd.away_team_record_level 		, sd.home_team_overall_record_level 		, sd.away_team_overall_record_level 		, gd.[home_score] 		, gd.[visitior_score] 		, home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn)
predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") game.results <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0)) %>% 		select(game_date, home_team, away_team, home_team_win, home_score, visitor_score, predicted_home_team_win, predictions)
predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response")
new.games
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/PredictGames") pd <- readRDS("./Model/PredictGames")
server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string)
server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	home_team = h.team 		, away_team = a.team 		, gd.game_date 		, sd.day_type 		, sd.home_team_record_level 		, sd.away_team_record_level 		, sd.home_team_overall_record_level 		, sd.away_team_overall_record_level 		, gd.[home_score] 		, gd.[visitor_score] 		, home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn)
predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response")
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/PredictGames") pd <- readRDS("./Model/PredictGames") server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	home_team = h.team 		, away_team = a.team 		, gd.game_date 		, sd.day_type 		, sd.home_team_record_level 		, sd.away_team_record_level 		, sd.home_team_overall_record_level 		, sd.away_team_overall_record_level 		, gd.[home_score] 		, gd.[visitor_score] 		, home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn)
predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response")
game.results <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0)) %>% 		select(game_date, home_team, away_team, home_team_win, home_score, visitor_score, predicted_home_team_win, predictions)
game.results
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/PredictGames") pd <- readRDS("./Model/PredictGames")
server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	home_team = h.team 		, away_team = a.team 		, gd.game_date 		, sd.day_type 		, sd.home_team_record_level 		, sd.away_team_record_level 		, sd.home_team_overall_record_level 		, sd.away_team_overall_record_level 		, gd.[home_score] 		, gd.[visitor_score] 		, home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData_FinalQuarterResults] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn)
predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response")
game.results <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0)) %>% 		select(game_date, home_team, away_team, home_team_win, home_score, visitor_score, predicted_home_team_win, predictions)
game.results
game.results <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0)) %>% 		select(game_date, home_team, away_team, home_score, visitor_score, home_team_win, predicted_home_team_win, predictions)
game.results
library("RODBC") library("tibble") library("magrittr") library("dplyr") setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/PredictGames") pd <- readRDS("./Model/PredictGames") server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	home_team = h.team 		, away_team = a.team 		, gd.game_date 		, sd.day_type 		, sd.home_team_record_level 		, sd.away_team_record_level 		, sd.home_team_overall_record_level 		, sd.away_team_overall_record_level 		, gd.[home_score] 		, gd.[visitor_score] 		, home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData_FinalQuarterResults] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn)
pd
predictions
predictions <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") game.results <- cbind(new.games, predictions) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0)) %>% 		select(game_date, home_team, away_team, home_score, visitor_score, home_team_win, predicted_home_team_win, predictions)
game.results
library("RODBC") library("tibble") library("magrittr") library("dplyr") setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/PredictGames") pd <- readRDS("./Model/PredictGames") server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	     gd.game_id 		,home_team_id 	    ,home_team = h.team 		,away_team = a.team 		,gd.[home_score] 		,gd.[visitor_score] 		,home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END	 		,gd.game_date 		,sd.day_type 		,sd.home_team_record_level 		,sd.away_team_record_level 		,sd.home_team_overall_record_level 		,sd.away_team_overall_record_level 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData_FinalQuarterResults] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn) Score <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") game.results <- cbind(new.games, GamePredictions) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0), predicted = 1) %>% 		select(game_id, home_team_id, game_date, home_team, away_team, home_score, visitor_score, home_team_win, predicted_home_team_win, Score)
library("RODBC") library("tibble") library("magrittr") library("dplyr") setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/PredictGames") pd <- readRDS("./Model/PredictGames") server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	     gd.game_id 		,home_team_id 	    ,home_team = h.team 		,away_team = a.team 		,gd.[home_score] 		,gd.[visitor_score] 		,home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END	 		,gd.game_date 		,sd.day_type 		,sd.home_team_record_level 		,sd.away_team_record_level 		,sd.home_team_overall_record_level 		,sd.away_team_overall_record_level 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData_FinalQuarterResults] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn) Score <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") game.results <- cbind(new.games, Score) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0), predicted = 1) %>% 		select(game_id, home_team_id, game_date, home_team, away_team, home_score, visitor_score, home_team_win, predicted_home_team_win, Score)
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/PredictGames") pd <- readRDS("./Model/PredictGames") server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	     gd.game_id 		,home_team_id 	    ,home_team = h.team 		,away_team = a.team 		,gd.[home_score] 		,gd.[visitor_score] 		,home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END	 		,gd.game_date 		,sd.day_type 		,sd.home_team_record_level 		,sd.away_team_record_level 		,sd.home_team_overall_record_level 		,sd.away_team_overall_record_level 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData_FinalQuarterResults] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn) Score <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") GamePredictions <- cbind(new.games, Score) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0), predicted = 1) %>% 		select(game_id, home_team_id, game_date, home_team, away_team, home_score, visitor_score, home_team_win, predicted_home_team_win, Score)
GamePredictions
GamePredictions <- cbind(new.games, Score) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0), predicted = 1) %>% 		select(game_id, home_team_id, game_date, home_team, away_team, game_date, home_score, visitor_score, home_team_win, predicted_home_team_win, Score)
library("RODBC") library("tibble") library("magrittr") library("dplyr") setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/PredictGames") pd <- readRDS("./Model/PredictGames") server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	     gd.game_id 		,home_team_id 	    ,home_team = h.team 		,away_team = a.team 		,gd.[home_score] 		,gd.[visitor_score] 		,home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END	 		,gd.game_date 		,sd.day_type 		,sd.home_team_record_level 		,sd.away_team_record_level 		,sd.home_team_overall_record_level 		,sd.away_team_overall_record_level 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData_FinalQuarterResults] gd 	ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 	ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 	ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn) Score <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") GamePredictions_1 <- cbind(new.games, Score) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0), predicted = 1) %>% 		select(game_id, home_team_id, game_date, home_team, away_team, game_date, home_score, visitor_score, home_team_win, predicted_home_team_win, Score)
install.packages('"RODBC"')
library(dplyr) library(readr) ComputeDist <-   function(pickup_long, 		   pickup_lat, 		   dropoff_long, 		   dropoff_lat) { 	R <- 6371 / 1.609344 #radius in mile 	delta_lat <- dropoff_lat - pickup_lat 	delta_long <- dropoff_long - pickup_long 	degrees_to_radians = pi / 180.0 	a1 <- sin(delta_lat / 2 * degrees_to_radians) 	a2 <- as.numeric(a1) ^ 2 	a3 <- cos(pickup_lat * degrees_to_radians) 	a4 <- cos(dropoff_lat * degrees_to_radians) 	a5 <- sin(delta_long / 2 * degrees_to_radians) 	a6 <- as.numeric(a5) ^ 2 	a <- a2 + a3 * a4 * a6 	c <- 2 * atan2(sqrt(a), sqrt(1 - a)) 	d <- R * c 	return(d)   } TaxiData <- read_csv("./Data/NYCTaxiCabTrips.csv") TaxiData <- TaxiData %>% 	mutate(`Trip Distance` = round(ComputeDist(pickup_long, pickup_lat, dropoff_long, dropoff_lat), 1))
library(dplyr) library(readr) ComputeDist <-   function(pickup_long, 		   pickup_lat, 		   dropoff_long, 		   dropoff_lat) { 	R <- 6371 / 1.609344 #radius in mile 	delta_lat <- dropoff_lat - pickup_lat 	delta_long <- dropoff_long - pickup_long 	degrees_to_radians = pi / 180.0 	a1 <- sin(delta_lat / 2 * degrees_to_radians) 	a2 <- as.numeric(a1) ^ 2 	a3 <- cos(pickup_lat * degrees_to_radians) 	a4 <- cos(dropoff_lat * degrees_to_radians) 	a5 <- sin(delta_long / 2 * degrees_to_radians) 	a6 <- as.numeric(a5) ^ 2 	a <- a2 + a3 * a4 * a6 	c <- 2 * atan2(sqrt(a), sqrt(1 - a)) 	d <- R * c 	return(d)   } TaxiData <- read_csv("./Data/NYCTaxiCabTrips.csv") TaxiData <- TaxiData %>% 	mutate(`Trip Distance` = round(ComputeDist(pickup_long, pickup_lat, dropoff_long, dropoff_lat), 1))
library(RODBC) library(readr) library(magrittr) library(tibble) # Read in the student ids and combines them into a string that separates them with a "|" students <- read_csv("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/ParameterizedQueries/Data/StudentList.csv") student_ids <- paste0("'",paste(students$StudentAK, collapse = "|"), "'") # Builds the connection string and sql statement that calls the dbo.DynamicReportParameters  # stored procedure that uses "student_ids" as a parameter  server.name = "DESKTOP-171P4OD" db.name = "StudentDB" sql.statement = paste("EXEC dbo.DynamicReportParameters", student_ids, sep = " ") connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") # Opens a connection to SQL Server and executes the query and stores the results of it to  # a R dataframe then closes the connection conn <- odbcDriverConnect(connection.string) FilteredData <- sqlQuery(channel = conn, sql.statement) %>% as_tibble()  odbcClose(conn)
FilteredData
library(data.table) library(purrr) library(tibble) # Set working director and get list of file names setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BasketballGameData") files <- list.files(".") # Applies the fread function to each element in the "files" function to create a list of data  # frames then uses the "rbindlist" function to combine the list of dataframes into one dataframe # then converts the dataframe to a tibble. all_games <- map(files, fread) %>% 	rbindlist() %>% 	as_tibble()
all_games
library(data.table) library(purrr) library(tibble) # Set working director and get list of file names setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BasketballGameData") files <- list.files(".") # Applies the fread function to each element in the "files" function to create a list of data  # frames then uses the "rbindlist" function to combine the list of dataframes into one dataframe # then converts the dataframe to a tibble. all_games <- map(files, fread) %>% 	rbindlist() %>% 	as_tibble()
library(data.table) library(purrr) library(tibble) # Set working director and get list of file names setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BasketballGameData") files <- list.files(".") # Applies the fread function to each element in the "files" function to create a list of data  # frames then uses the "rbindlist" function to combine the list of dataframes into one dataframe # then converts the dataframe to a tibble. NBA_Games <- map(files, fread) %>% 	rbindlist() 
NBA_Games <- map(files, fread) %>% 	rbindlist() %>% 	as_tibble()
NBA_Games
library(RODBC) library(readr) library(magrittr) library(tibble) # Read in the student ids and combines them into a string that separates them with a "|" students <- read_csv("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/ParameterizedQueries/Data/StudentList.csv") student_ids <- paste0("'",paste(students$StudentAK, collapse = "|"), "'") # Builds the connection string and sql statement that calls the dbo.DynamicReportParameters  # stored procedure that uses "student_ids" as a parameter  server.name = "DESKTOP-171P4OD" db.name = "StudentDB" sql.statement = paste("EXEC dbo.DynamicReportParameters", student_ids, sep = " ") connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") # Opens a connection to SQL Server and executes the query and stores the results of it to  # a R dataframe then closes the connection conn <- odbcDriverConnect(connection.string) FilteredData <- sqlQuery(channel = conn, sql.statement) %>% as_tibble()  odbcClose(conn)
FilteredData
library(dplyr) library(readr)
ComputeDist <-   function(pickup_long, 		   pickup_lat, 		   dropoff_long, 		   dropoff_lat) { 	R <- 6371 / 1.609344 #radius in mile 	delta_lat <- dropoff_lat - pickup_lat 	delta_long <- dropoff_long - pickup_long 	degrees_to_radians = pi / 180.0 	a1 <- sin(delta_lat / 2 * degrees_to_radians) 	a2 <- as.numeric(a1) ^ 2 	a3 <- cos(pickup_lat * degrees_to_radians) 	a4 <- cos(dropoff_lat * degrees_to_radians) 	a5 <- sin(delta_long / 2 * degrees_to_radians) 	a6 <- as.numeric(a5) ^ 2 	a <- a2 + a3 * a4 * a6 	c <- 2 * atan2(sqrt(a), sqrt(1 - a)) 	d <- R * c 	return(d)   }
TaxiData <- read_csv("./Data/NYCTaxiCabTrips.csv")
TaxiData <- read_csv("./Data/NYCTaxiCabTrips.csv")
TaxiData
TaxiData <- TaxiData %>% 	mutate(`Trip Distance` = round(ComputeDist(pickup_long, pickup_lat, dropoff_long, dropoff_lat), 1))
TaxiData
library(data.table) library(purrr) library(magrittr) library(tibble) setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BLS") #Get a list of files in the BLS folder bls_files <- list.files(path = ".") #List all files that begins with "la.data.[<1 or 2 digit number>]" bls_files <- list.files(path = ".", pattern = "la\\.data\\.\\d+\\.*") #Remove files that begins with "la.data.0.Current*" using a negative lookahead grep("la.data.\\d+.(?!Current.*)", bls_files, value = T, perl = T) #Remove files that begins with "la.data.0.Current*" and other non-state files using negative look behinds grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T) #Stores the files in a character vector and concatenates the beginning part of the file path to each file  bls_files <- grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T) #Combines all of the files that represents a state into a list  cc <- c("character", "character", "character", "character", "character") bls_data <- map(bls_files, fread, colClasses = cc) %>% 	rbindlist() %>% 	as_tibble()
bls_files <- list.files(path = ".")
bls_files
grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T)
bls_files <- grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T)
cc <- c("character", "character", "character", "character", "character")
bls_data <- map(bls_files, fread, colClasses = cc) %>% 	rbindlist() %>% 	as_tibble()
bls_data
library(lubridate) library(rvest) library(stringr) library(purrr) library(tibble) url <- "https://www.opm.gov/policy-data-oversight/snow-dismissal-procedures/federal-holidays/" selector.gadget  <- "http://selectorgadget.com/" holiday_data <- 	read_html(url) %>% 	html_nodes(".DataTable") %>% 	html_text() holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "") holiday_vector_length <- length(holiday_vector) - 1 year <- as.numeric(str_sub(holiday_vector[1], 1, 4)) holiday_vector <- holiday_vector[2:holiday_vector_length] dates <- holiday_vector[seq(1, holiday_vector_length, 2)] %>% 		na.omit() %>% 		paste(year, sep = " ") %>% 		mdy() holidays <- holiday_vector[seq(2, holiday_vector_length, 2)] holiday_year_info <- tibble(dates, holidays)
holiday_year_info 
library(lubridate) library(rvest) library(stringr) library(purrr) library(tibble) url <- "https://www.opm.gov/policy-data-oversight/snow-dismissal-procedures/federal-holidays/" selector.gadget  <- "http://selectorgadget.com/" holiday_data <- 	read_html(url) %>% 	html_nodes(".DataTable") %>% 	html_text() holiday_vector <- holiday_data[[1]] %>%library("RODBC") library("tibble") library("magrittr") library("dplyr") setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/PredictGames") pd <- readRDS("./Model/PredictGames") server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" #connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") connection.string = paste0("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	     gd.game_id 		,home_team_id 	    ,home_team = h.team 		,away_team = a.team 		,gd.[home_score] 		,gd.[visitor_score] 		,home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END	 		,gd.game_date 		,sd.day_type 		,sd.home_team_record_level 		,sd.away_team_record_level 		,sd.home_team_overall_record_level 		,sd.away_team_overall_record_level 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData_FinalQuarterResults] gd 		ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 		ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 		ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn) Score <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") GamePredictions <- cbind(new.games, Score) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0), predicted = 1) %>% 		select(game_id, home_team_id, game_date, home_team, away_team, game_date, home_score, visitor_score, home_team_win, predicted_home_team_win, Score) 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "") holiday_vector_length <- length(holiday_vector) - 1 year <- as.numeric(str_sub(holiday_vector[1], 1, 4)) holiday_vector <- holiday_vector[2:holiday_vector_length] dates <- holiday_vector[seq(1, holiday_vector_length, 2)] %>% 		na.omit() %>% 		paste(year, sep = " ") %>% 		mdy() holidays <- holiday_vector[seq(2, holiday_vector_length, 2)] holiday_year_info <- tibble(dates, holidays)
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/PredictGames") pd <- readRDS("./Model/PredictGames")
server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" #connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") connection.string = paste0("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	     gd.game_id 		,home_team_id 	    ,home_team = h.team 		,away_team = a.team 		,gd.[home_score] 		,gd.[visitor_score] 		,home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END	 		,gd.game_date 		,sd.day_type 		,sd.home_team_record_level 		,sd.away_team_record_level 		,sd.home_team_overall_record_level 		,sd.away_team_overall_record_level 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData_FinalQuarterResults] gd 		ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 		ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 		ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn)
library("RODBC") library("tibble") library("magrittr") library("dplyr")
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/PredictGames") pd <- readRDS("./Model/PredictGames") server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" #connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") connection.string = paste0("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	     gd.game_id 		,home_team_id 	    ,home_team = h.team 		,away_team = a.team 		,gd.[home_score] 		,gd.[visitor_score] 		,home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END	 		,gd.game_date 		,sd.day_type 		,sd.home_team_record_level 		,sd.away_team_record_level 		,sd.home_team_overall_record_level 		,sd.away_team_overall_record_level 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData_FinalQuarterResults] gd 		ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 		ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 		ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn)
Score <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") GamePredictions <- cbind(new.games, Score) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(predictions > 0.5, 1, 0), predicted = 1) %>% 		select(game_id, home_team_id, game_date, home_team, away_team, game_date, home_score, visitor_score, home_team_win, predicted_home_team_win, Score)
Score <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") GamePredictions <- cbind(new.games, Score) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(Score > 0.5, 1, 0), Score = 1) %>% 		select(game_id, home_team_id, game_date, home_team, away_team, game_date, home_score, visitor_score, home_team_win, predicted_home_team_win, Score)
#Loads the necessary libraries library(tidyverse) library(lubridate) library(rvest) library(stringr) # This function is used to create the "date table". The only arguments you pass in are the begin and end date Create.Date.Table <- function(start.date, end.date) { 	#Base date table 	Dates <- seq(ymd(start.date), ymd(end.date), by = "days") # Creates a vector of dates starting with the start.date and ending with the end.date incrementing by a day 	FiscalYearEndMonth = 6 	# Creates a one column data frame based on the Dates vector created above 	DateTable <- data.frame(Dates) 	DateTable <- DateTable %>% 	# Uses the mutate verb and a few functions from the lubridate package to create date attribute fields for the "DateTables" data frame   	mutate("DateKey" = format(Dates, "%Y%m%d") # Uses the format function to format the date in YYYYMMDD format so that it can be used as a key 			   , "Month Name" = format(Dates, "%b") # Uses the format function to return the proper abbreviated month name for the given date. 			   , "Weekday Name" = wday(Dates, label = TRUE) # Uses the wday function to return the proper abbreviated weekday name for the given date. 			   , "Weekday Key" = wday(Dates) # Uses the wday function to return the integer representation of the weekday for the given date. 			   , "Year" = year(Dates) # Uses the year function to return the year for the given date. 			   , "Fiscal Year" = Year + ifelse(month(Dates) > FiscalYearEndMonth, 1, 0) # Calculates the fiscal year using the FiscalYearEndMonth variable to determine the end of the fiscal year 			   , "Month Key" = month(Dates) # Uses the month function to return the integer representation of the month for the given date. 			   , "Month Day" = mday(Dates) # Uses the mday function to return the day of the month for the given date 			   , "Iso Year" = isoyear(Dates) # Uses the isoyear function to return the iso year for the given date 			   , "Week" = week(Dates) # Uses the week function to return the week of the year for the given date 			   , "Iso Week" = isoweek(Dates) # Uses the isoweek function to return the iso week of the year for the given date 			   , "Quarter" = quarter(Dates) # Uses the quarter function to return the quarter of the year for the given date 			   , "Quarter Day" = qday(Dates) # (looks like it is returning seconds) USes the qday function to return the day of the quarter for the given date 			   , "Year Day" = yday(Dates) # Uses the yday function to return the day of the year for the given date 			   , "Weekend" = ifelse(wday(Dates) %in% c(1, 7), TRUE, FALSE) # Determines if the given date occurs in the weekend based on the wkday function 		) %>% 	# The select verb below is used to reorder the fields in the data frame in a more logical order     	select(`DateKey`, `Dates`, `Year`, `Fiscal Year`, `Iso Year`, `Year Day`, `Quarter`, `Quarter Day`, `Month Name`, `Month Key`, 			   `Month Day`, `Week`, `Iso Week`, `Weekday Name`, `Weekday Key`, `Weekend` 		) 	#Add holidays 	Dates <- as.Date(NA) 	Holidays <- as.character(NA) 	Holiday_Info <- tibble(Dates, Holidays) 	# Uses the rvest package to extract the federal holidays from the website for each year passed to it. Reads in the html from the website passed into it 	# and then identifies the nodes that it wants to extract based on what we identified using the selectorgadget or developer tools in Google Chrome. The value 	# of those nodes are returned back to us in the form of a character vector using the html_text function. 	url <- "https://www.opm.gov/policy-data-oversight/snow-dismissal-procedures/federal-holidays/#url=201" 	Holiday_Data <- 		read_html(url) %>% 		html_nodes(".DataTable") %>% 		html_text() 	items <- length(Holiday_Data) 	for (item in 1:5) { 		Holiday_Vector <- Holiday_Data[[item]] %>% 			str_split(pattern = "\r\n") %>% 			flatten_chr() %>% 			str_replace("DateHoliday", "") %>% 			str_replace("^[A-Za-z]+,\\s", "") %>% 			str_replace("\\*+", "") 		Holiday_Vector_Length <- length(Holiday_Vector) - 1 		year <- as.numeric(str_sub(Holiday_Vector[1], 1, 4)) 		Holiday_Vector <- Holiday_Vector[2:Holiday_Vector_Length] 		Dates <- Holiday_Vector[seq(1, Holiday_Vector_Length, 2)] %>% 			na.omit() %>% 			paste(year, sep = " ") %>% 			mdy() 		Holidays <- Holiday_Vector[seq(2, Holiday_Vector_Length, 2)] 		Holiday_Year_Info <- tibble(Dates, Holidays) 		Holiday_Info <- rbind(Holiday_Year_Info, Holiday_Info) 	} 	Holiday_Info <- na.omit(Holiday_Info) 	# Adds a boolean field called "Federal Holiday" to the DateTable data frame. For each date in the DateTable dataframe it test whether 	# the date is one of the dates in the federal_holidays vector and if it is it returns TRUE otherwise it returns FALSE 	# DateTable$`Federal Holiday` <- DateTable$Dates %in% federal_holidays 	DateTable <- left_join(DateTable, Holiday_Info) %>% 		mutate(`Federal Holiday`=ifelse(is.na(Holidays),FALSE,TRUE)) 	return(DateTable) # Returns a data frame of a date table based on the date parameters passed in. } My.Date.Table <- Create.Date.Table(start.date = "2016-01-01", end.date = "2020-12-31")
library(data.table) library(purrr) library(magrittr) library(tibble)
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BLS")
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BLS")
bls_files <- list.files(path = ".")
grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T)
bls_files
library(data.table) library(purrr) library(magrittr) library(tibble)
bls_files <- list.files(path = ".")
library(data.table) library(purrr) library(magrittr) library(tibble)
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BLS")
bls_files <- list.files(path = ".")
bls_files
grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T)
bls_files <- grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T)
bls_data <- map(bls_files, fread, colClasses = cc) %>% 	rbindlist() %>% 	as_tibble()
cc <- c("character", "character", "character", "character", "character") bls_data <- map(bls_files, fread, colClasses = cc) %>% 	rbindlist() %>% 	as_tibble()
bls_data
library(data.table) library(purrr) library(tibble)
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BasketballGameData") files <- list.files(".")
files
# Applies the fread function to each element in the "files" function to create a list of data  # frames then uses the "rbindlist" function to combine the list of dataframes into one dataframe # then converts the dataframe to a tibble. NBA_Games <- map(files, fread) %>% 	rbindlist() %>% 	as_tibble()
NBA_Games
?fread
library(RODBC) library(readr) library(magrittr) library(tibble)
students <- read_csv("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/ParameterizedQueries/Data/StudentList.csv")
students$StudentAK
length(students$StudentAK)
student_ids <- paste0("'",paste(students$StudentAK, collapse = "|"), "'")
student_ids
library(RODBC) library(readr) library(magrittr) library(tibble) # Read in the student ids and combines them into a string that separates them with a "|" students <- read_csv("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/ParameterizedQueries/Data/StudentList.csv") student_ids <- paste0("'",paste(students$StudentAK, collapse = "|"), "'") # Builds the connection string and sql statement that calls the dbo.DynamicReportParameters  # stored procedure that uses "student_ids" as a parameter  server.name = "DESKTOP-171P4OD" db.name = "StudentDB" sql.statement = paste("EXEC dbo.DynamicReportParameters", student_ids, sep = " ") connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") # Opens a connection to SQL Server and executes the query and stores the results of it to  # a R dataframe then closes the connection conn <- odbcDriverConnect(connection.string) FilteredData <- sqlQuery(channel = conn, sql.statement) %>% as_tibble()  odbcClose(conn)
FilteredData
library(lubridate) library(rvest) library(stringr) library(purrr) library(tibble)
url <- "https://www.opm.gov/policy-data-oversight/snow-dismissal-procedures/federal-holidays/"
url <- "https://www.opm.gov/policy-data-oversight/snow-dismissal-procedures/federal-holidays/"
holiday_data <- 	read_html(url) %>% 	html_nodes(".DataTable") %>% 	html_text()
holiday_data
holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n")
holiday_vector
holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "")
holiday_vector
holiday_vector_length <- length(holiday_vector) - 1 year <- as.numeric(str_sub(holiday_vector[1], 1, 4)) holiday_vector <- holiday_vector[2:holiday_vector_length]
holiday_vector
holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "")
holiday_vector
holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "") holiday_vector_length <- length(holiday_vector) - 2
year <- as.numeric(str_sub(holiday_vector[1], 1, 4))
year
holiday_vector <- holiday_vector[2:holiday_vector_length]
dates <- holiday_vector[seq(1, holiday_vector_length, 2)] %>% 		#na.omit() %>% 		paste(year, sep = " ") %>% 		mdy()
dates
holidays <- holiday_vector[seq(2, holiday_vector_length, 2)]
holidays
holiday_vector_length <- length(holiday_vector) - 1 year <- as.numeric(str_sub(holiday_vector[1], 1, 4)) holiday_vector <- holiday_vector[2:holiday_vector_length] dates <- holiday_vector[seq(1, holiday_vector_length, 2)] %>% 		na.omit() %>% 		paste(year, sep = " ") %>% 		mdy()
holiday_data <- 	read_html(url) %>% 	html_nodes(".DataTable") %>% 	html_text() holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "") holiday_vector_length <- length(holiday_vector) - 1 year <- as.numeric(str_sub(holiday_vector[1], 1, 4)) holiday_vector <- holiday_vector[2:holiday_vector_length] dates <- holiday_vector[seq(1, holiday_vector_length, 2)] %>% 		na.omit() %>% 		paste(year, sep = " ") %>% 		mdy()
holidays <- holiday_vector[seq(2, holiday_vector_length, 2)]
holidays
holiday_year_info <- tibble(dates, holidays)
holiday_vector_length
holiday_vector
holiday_vector <- holiday_vector[2:holiday_vector_length]
holiday_vector
holiday_vector_length <- length(holiday_vector) - 2
year <- as.numeric(str_sub(holiday_vector[1], 1, 4))
holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "") holiday_vector_length <- length(holiday_vector) - 2
year <- as.numeric(str_sub(holiday_vector[1], 1, 4))
year
holiday_vector <- holiday_vector[2:holiday_vector_length]
holiday_vector
holiday_vector <- holiday_vector[2:holiday_vector_length+1]
holiday_vector
holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "")
holiday_vector_length <- length(holiday_vector) - 1
year <- as.numeric(str_sub(holiday_vector[1], 1, 4))
holiday_vector <- holiday_vector[2:holiday_vector_length+1]
holiday_vector
holiday_vector <- holiday_vector[2:holiday_vector_length+1] holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "")
holiday_vector
holiday_vector_length <- length(holiday_vector) - 1
year <- as.numeric(str_sub(holiday_vector[1], 1, 4))
holiday_vector <- holiday_vector[2:holiday_vector_length+1]
holiday_vector <- holiday_vector[2:holiday_vector_length+1]
holiday_vector
holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "") holiday_vector_length <- length(holiday_vector) - 1 year <- as.numeric(str_sub(holiday_vector[1], 1, 4)) holiday_vector <- holiday_vector[2:holiday_vector_length+1]
holiday_vector
dates <- holiday_vector[seq(1, holiday_vector_length, 2)] %>% 		na.omit() %>% 		paste(year, sep = " ") %>% 		mdy()
holiday_data <- 	read_html(url) %>% 	html_nodes(".DataTable") %>% 	html_text() holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "") holiday_vector_length <- length(holiday_vector) - 1 year <- as.numeric(str_sub(holiday_vector[1], 1, 4)) holiday_vector <- holiday_vector[2:holiday_vector_length+1] dates <- holiday_vector[seq(1, holiday_vector_length, 2)] %>% 		na.omit() %>% 		paste(year, sep = " ") %>% 		mdy()
dates
holiday_data <- 	read_html(url) %>% 	html_nodes(".DataTable") %>% 	html_text() holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "") holiday_vector_length <- length(holiday_vector) - 1 year <- as.numeric(str_sub(holiday_vector[1], 1, 4)) holiday_vector <- holiday_vector[2:holiday_vector_length+1] dates <- holiday_vector[seq(1, holiday_vector_length, 2)] %>% 		na.omit() %>% 		paste(year, sep = " ") %>% 		mdy()
holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "") holiday_vector_length <- length(holiday_vector) - 1 year <- as.numeric(str_sub(holiday_vector[1], 1, 4)) holiday_vector <- holiday_vector[2:holiday_vector_length]
dates <- holiday_vector[seq(1, holiday_vector_length, 2)] %>% 		na.omit() %>% 		paste(year, sep = " ") %>% 		mdy()
dates
holidays <- holiday_vector[seq(2, holiday_vector_length, 2)]
holidays
dates
holiday_year_info <- tibble(dates, holidays)
library(lubridate)
mdy("jan 1 2017")
library(data.table) library(purrr) library(magrittr) library(tibble) setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BLS") #Get a list of files in the BLS folder bls_files <- list.files(path = ".") #Remove files that begins with "la.data.0.Current*" and other non-state files using negative look behinds #grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T) #Stores the files in a character vector and concatenates the beginning part of the file path to each file  bls_files <- grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T) #Combines all of the files that represents a state into a list  cc <- c("character", "character", "character", "character", "character") bls_data <- map(bls_files, fread, colClasses = cc) %>% 	rbindlist() %>% 	as_tibble()
#Loads the necessary libraries library(tidyverse) library(lubridate) library(rvest) library(stringr) # This function is used to create the "date table". The only arguments you pass in are the begin and end date Create.Date.Table <- function(start.date, end.date) { 	#Base date table 	Dates <- seq(ymd(start.date), ymd(end.date), by = "days") # Creates a vector of dates starting with the start.date and ending with the end.date incrementing by a day 	FiscalYearEndMonth = 6 	# Creates a one column data frame based on the Dates vector created above 	DateTable <- data.frame(Dates) 	DateTable <- DateTable %>% 	# Uses the mutate verb and a few functions from the lubridate package to create date attribute fields for the "DateTables" data frame   	mutate("DateKey" = format(Dates, "%Y%m%d") # Uses the format function to format the date in YYYYMMDD format so that it can be used as a key 			   , "Month Name" = format(Dates, "%b") # Uses the format function to return the proper abbreviated month name for the given date. 			   , "Weekday Name" = wday(Dates, label = TRUE) # Uses the wday function to return the proper abbreviated weekday name for the given date. 			   , "Weekday Key" = wday(Dates) # Uses the wday function to return the integer representation of the weekday for the given date. 			   , "Year" = year(Dates) # Uses the year function to return the year for the given date. 			   , "Fiscal Year" = Year + ifelse(month(Dates) > FiscalYearEndMonth, 1, 0) # Calculates the fiscal year using the FiscalYearEndMonth variable to determine the end of the fiscal year 			   , "Month Key" = month(Dates) # Uses the month function to return the integer representation of the month for the given date. 			   , "Month Day" = mday(Dates) # Uses the mday function to return the day of the month for the given date 			   , "Iso Year" = isoyear(Dates) # Uses the isoyear function to return the iso year for the given date 			   , "Week" = week(Dates) # Uses the week function to return the week of the year for the given date 			   , "Iso Week" = isoweek(Dates) # Uses the isoweek function to return the iso week of the year for the given date 			   , "Quarter" = quarter(Dates) # Uses the quarter function to return the quarter of the year for the given date 			   , "Quarter Day" = qday(Dates) # (looks like it is returning seconds) USes the qday function to return the day of the quarter for the given date 			   , "Year Day" = yday(Dates) # Uses the yday function to return the day of the year for the given date 			   , "Weekend" = ifelse(wday(Dates) %in% c(1, 7), TRUE, FALSE) # Determines if the given date occurs in the weekend based on the wkday function 		) %>% 	# The select verb below is used to reorder the fields in the data frame in a more logical order     	select(`DateKey`, `Dates`, `Year`, `Fiscal Year`, `Iso Year`, `Year Day`, `Quarter`, `Quarter Day`, `Month Name`, `Month Key`, 			   `Month Day`, `Week`, `Iso Week`, `Weekday Name`, `Weekday Key`, `Weekend` 		) 	#Add holidays 	Dates <- as.Date(NA) 	Holidays <- as.character(NA) 	Holiday_Info <- tibble(Dates, Holidays) 	# Uses the rvest package to extract the federal holidays from the website for each year passed to it. Reads in the html from the website passed into it 	# and then identifies the nodes that it wants to extract based on what we identified using the selectorgadget or developer tools in Google Chrome. The value 	# of those nodes are returned back to us in the form of a character vector using the html_text function. 	url <- "https://www.opm.gov/policy-data-oversight/snow-dismissal-procedures/federal-holidays/#url=201" 	Holiday_Data <- 		read_html(url) %>% 		html_nodes(".DataTable") %>% 		html_text() 	items <- length(Holiday_Data) 	for (item in 1:5) { 		Holiday_Vector <- Holiday_Data[[item]] %>% 			str_split(pattern = "\r\n") %>% 			flatten_chr() %>% 			str_replace("DateHoliday", "") %>% 			str_replace("^[A-Za-z]+,\\s", "") %>% 			str_replace("\\*+", "") 		Holiday_Vector_Length <- length(Holiday_Vector) - 1 		year <- as.numeric(str_sub(Holiday_Vector[1], 1, 4)) 		Holiday_Vector <- Holiday_Vector[2:Holiday_Vector_Length] 		Dates <- Holiday_Vector[seq(1, Holiday_Vector_Length, 2)] %>% 			na.omit() %>% 			paste(year, sep = " ") %>% 			mdy() 		Holidays <- Holiday_Vector[seq(2, Holiday_Vector_Length, 2)] 		Holiday_Year_Info <- tibble(Dates, Holidays) 		Holiday_Info <- rbind(Holiday_Year_Info, Holiday_Info) 	} 	Holiday_Info <- na.omit(Holiday_Info) 	# Adds a boolean field called "Federal Holiday" to the DateTable data frame. For each date in the DateTable dataframe it test whether 	# the date is one of the dates in the federal_holidays vector and if it is it returns TRUE otherwise it returns FALSE 	# DateTable$`Federal Holiday` <- DateTable$Dates %in% federal_holidays 	DateTable <- left_join(DateTable, Holiday_Info) %>% 		mutate(`Federal Holiday`=ifelse(is.na(Holidays),FALSE,TRUE)) 	return(DateTable) # Returns a data frame of a date table based on the date parameters passed in. } My.Date.Table <- Create.Date.Table(start.date = "2016-01-01", end.date = "2020-12-31")
library(tidyverse) library(lubridate) library(rvest) library(stringr)
Create.Date.Table <- function(start.date, end.date) { 	#Base date table 	Dates <- seq(ymd(start.date), ymd(end.date), by = "days") # Creates a vector of dates starting with the start.date and ending with the end.date incrementing by a day 	FiscalYearEndMonth = 6 	# Creates a one column data frame based on the Dates vector created above 	DateTable <- data.frame(Dates) 	DateTable <- DateTable %>% 	# Uses the mutate verb and a few functions from the lubridate package to create date attribute fields for the "DateTables" data frame   	mutate("DateKey" = format(Dates, "%Y%m%d") # Uses the format function to format the date in YYYYMMDD format so that it can be used as a key 			   , "Month Name" = format(Dates, "%b") # Uses the format function to return the proper abbreviated month name for the given date. 			   , "Weekday Name" = wday(Dates, label = TRUE) # Uses the wday function to return the proper abbreviated weekday name for the given date. 			   , "Weekday Key" = wday(Dates) # Uses the wday function to return the integer representation of the weekday for the given date. 			   , "Year" = year(Dates) # Uses the year function to return the year for the given date. 			   , "Fiscal Year" = Year + ifelse(month(Dates) > FiscalYearEndMonth, 1, 0) # Calculates the fiscal year using the FiscalYearEndMonth variable to determine the end of the fiscal year 			   , "Month Key" = month(Dates) # Uses the month function to return the integer representation of the month for the given date. 			   , "Month Day" = mday(Dates) # Uses the mday function to return the day of the month for the given date 			   , "Iso Year" = isoyear(Dates) # Uses the isoyear function to return the iso year for the given date 			   , "Week" = week(Dates) # Uses the week function to return the week of the year for the given date 			   , "Iso Week" = isoweek(Dates) # Uses the isoweek function to return the iso week of the year for the given date 			   , "Quarter" = quarter(Dates) # Uses the quarter function to return the quarter of the year for the given date 			   , "Quarter Day" = qday(Dates) # (looks like it is returning seconds) USes the qday function to return the day of the quarter for the given date 			   , "Year Day" = yday(Dates) # Uses the yday function to return the day of the year for the given date 			   , "Weekend" = ifelse(wday(Dates) %in% c(1, 7), TRUE, FALSE) # Determines if the given date occurs in the weekend based on the wkday function 		) %>% 	# The select verb below is used to reorder the fields in the data frame in a more logical order     	select(`DateKey`, `Dates`, `Year`, `Fiscal Year`, `Iso Year`, `Year Day`, `Quarter`, `Quarter Day`, `Month Name`, `Month Key`, 			   `Month Day`, `Week`, `Iso Week`, `Weekday Name`, `Weekday Key`, `Weekend` 		) 	#Add holidays 	Dates <- as.Date(NA) 	Holidays <- as.character(NA) 	Holiday_Info <- tibble(Dates, Holidays) 	# Uses the rvest package to extract the federal holidays from the website for each year passed to it. Reads in the html from the website passed into it 	# and then identifies the nodes that it wants to extract based on what we identified using the selectorgadget or developer tools in Google Chrome. The value 	# of those nodes are returned back to us in the form of a character vector using the html_text function. 	url <- "https://www.opm.gov/policy-data-oversight/snow-dismissal-procedures/federal-holidays/#url=201" 	Holiday_Data <- 		read_html(url) %>% 		html_nodes(".DataTable") %>% 		html_text() 	items <- length(Holiday_Data) 	for (item in 1:5) { 		Holiday_Vector <- Holiday_Data[[item]] %>% 			str_split(pattern = "\r\n") %>% 			flatten_chr() %>% 			str_replace("DateHoliday", "") %>% 			str_replace("^[A-Za-z]+,\\s", "") %>% 			str_replace("\\*+", "") 		Holiday_Vector_Length <- length(Holiday_Vector) - 1 		year <- as.numeric(str_sub(Holiday_Vector[1], 1, 4)) 		Holiday_Vector <- Holiday_Vector[2:Holiday_Vector_Length] 		Dates <- Holiday_Vector[seq(1, Holiday_Vector_Length, 2)] %>% 			na.omit() %>% 			paste(year, sep = " ") %>% 			mdy() 		Holidays <- Holiday_Vector[seq(2, Holiday_Vector_Length, 2)] 		Holiday_Year_Info <- tibble(Dates, Holidays) 		Holiday_Info <- rbind(Holiday_Year_Info, Holiday_Info) 	} 	Holiday_Info <- na.omit(Holiday_Info) 	# Adds a boolean field called "Federal Holiday" to the DateTable data frame. For each date in the DateTable dataframe it test whether 	# the date is one of the dates in the federal_holidays vector and if it is it returns TRUE otherwise it returns FALSE 	# DateTable$`Federal Holiday` <- DateTable$Dates %in% federal_holidays 	DateTable <- left_join(DateTable, Holiday_Info) %>% 		mutate(`Federal Holiday`=ifelse(is.na(Holidays),FALSE,TRUE)) 	return(DateTable) # Returns a data frame of a date table based on the date parameters passed in. } My.Date.Table <- Create.Date.Table(start.date = "2016-01-01", end.date = "2020-12-31")
library(lubridate) library(rvest) library(stringr) library(purrr) library(tibble)
url <- "https://www.opm.gov/policy-data-oversight/snow-dismissal-procedures/federal-holidays/"
holiday_data <- 	read_html(url) %>% 	html_nodes(".DataTable") %>% 	html_text()
holiday_data
holiday_vector <- holiday_data[[1]] %>% 		str_split(pattern = "\r\n") %>% 		flatten_chr() %>% 		str_replace("DateHoliday", "") %>% 		str_replace("^[A-Z][a-z]+,\\s", "") %>% 		str_replace("\\*+", "")
holiday_vector
holiday_vector_length <- length(holiday_vector) - 1 year <- as.numeric(str_sub(holiday_vector[1], 1, 4)) holiday_vector <- holiday_vector[2:holiday_vector_length]
dates <- holiday_vector[seq(1, holiday_vector_length, 2)] %>% 		na.omit() %>% 		paste(year, sep = " ") %>% 		mdy()
dates
holidays <- holiday_vector[seq(2, holiday_vector_length, 2)]
holidays
holiday_year_info <- tibble(dates, holidays)
holiday_year_info
library(data.table)
library(purrr)
library(tibble)
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BasketballGameData")
list.files(".")
files <- list.files(".")
NBA_Games <- map(files, fread) %>% 	rbindlist() %>% 	as_tibble()
NBA_Games
library(data.table)
library(purrr)
library(magrittr)
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/CombiningMultipleFiles/BLS")
bls_files <- list.files(path = ".")
bls_files
grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T)
grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T)
bls_files <- grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)))", bls_files, value = T, perl = T)
?fread
bls_files <- grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)|(Division))", bls_files, value = T, perl = T)
bls_files <- grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)|(Division)))", bls_files, value = T, perl = T)
grep("la\\.data\\.\\d+\\.(?!((Current.*)|(All.*)|(Region.*)|(County)|(Micro)|(City)|(Combined)|(Metro)|(Division)))", bls_files, value = T, perl = T)
?fread
library("RODBC") library("tibble") library("magrittr") library("dplyr")
library("RODBC") library("tibble") library("magrittr") library("dplyr")
pd <- readRDS("./Model/PredictGames")
server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" #connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") connection.string = paste0("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true") conn <- odbcDriverConnect(connection.string) sql.statement = " 	SELECT 	     gd.game_id 		,home_team_id 	    ,home_team = h.team 		,away_team = a.team 		,gd.[home_score] 		,gd.[visitor_score] 		,home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END	 		,gd.game_date 		,sd.day_type 		,sd.home_team_record_level 		,sd.away_team_record_level 		,sd.home_team_overall_record_level 		,sd.away_team_overall_record_level 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData_FinalQuarterResults] gd 		ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 		ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 		ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn)
Score <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response")
GamePredictions <- cbind(new.games, Score) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(Score > 0.5, 1, 0), Score = 1) %>% 		select(game_id, home_team_id, game_date, home_team, away_team, game_date, home_score, visitor_score, home_team_win, predicted_home_team_win, Score)
server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" #connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") connection.string = paste0("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true") conn <- odbcDriverConnect(connection.string)
library("RODBC") library("tibble") library("magrittr") library("dplyr")
setwd("C:/Users/RWADE_HP/OneDrive - Diesel Analytics/Talks/PASS_Summit/RScripts/PredictGames") pd <- readRDS("./Model/PredictGames") server.name = "DESKTOP-171P4OD" db.name = "NBAPredictions" #connection.string = paste("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true", sep = "") connection.string = paste0("driver={SQL Server}", ";", "server=", server.name, ";", "database=", db.name, ";", "trusted_connection=true") conn <- odbcDriverConnect(connection.string)
sql.statement = " 	SELECT 	     gd.game_id 		,home_team_id 	    ,home_team = h.team 		,away_team = a.team 		,gd.[home_score] 		,gd.[visitor_score] 		,home_team_win = CASE WHEN gd.[home_score] > gd.[visitor_score] THEN 1 ELSE 0 END	 		,gd.game_date 		,sd.day_type 		,sd.home_team_record_level 		,sd.away_team_record_level 		,sd.home_team_overall_record_level 		,sd.away_team_overall_record_level 	FROM ScoreData sd 	INNER JOIN[dbo] .[GameData_FinalQuarterResults] gd 		ON sd.game_id = gd.game_id 	INNER JOIN[dbo] .[TeamInfo] h 		ON gd.home_team_id = h.ID 	INNER JOIN[dbo] .[TeamInfo] a 		ON gd.away_team_id = a.ID 	" new.games <- sqlQuery(channel = conn, sql.statement) %>% 	as_tibble() odbcClose(conn) Score <- predict.glm(pd, newdata = new.games, family = binomial(link = "logit"), type = "response") GamePredictions <- cbind(new.games, Score) %>% 		as_tibble() %>% 		mutate(predicted_home_team_win = ifelse(Score > 0.5, 1, 0), Score = 1) %>% 		select(game_id, home_team_id, game_date, home_team, away_team, game_date, home_score, visitor_score, home_team_win, predicted_home_team_win, Score)
GamePredictions
